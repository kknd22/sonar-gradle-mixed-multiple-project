


apply plugin: "java"
apply plugin: 'scala'
apply plugin: "com.github.maiflai.scalatest"
apply plugin: 'scoverage'
apply plugin: 'findbugs'



tasks.withType(Test)  {
    maxParallelForks = 1
}

dependencies {
    scoverage "org.scoverage:scalac-scoverage-plugin_2.11:1.1.0"
    scoverage "org.scoverage:scalac-scoverage-runtime_2.11:1.1.0"

    runtime "org.scala-lang:scala-compiler:2.11.7"
    compile "org.scala-lang:scala-library:2.11.7"

    testCompile "org.scalatest:scalatest_2.11:2.2.5"
    testRuntime "org.pegdown:pegdown:1.1.0"

    // ------------------------------------------------------------
    findbugs 'com.google.code.findbugs:findbugs:3.0.1'
    findbugs configurations.findbugsPlugins.dependencies

    // Here we mention findsecbugs plugin
    findbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.4.4'
}

task findbugs(type: FindBugs, dependsOn : [compileScala]) {

    classes = fileTree(buildDir).include("**/*.class");
    source = fileTree('src').include("**/*.scala");
    classpath = files()
    pluginClasspath = project.configurations.findbugsPlugins

    findbugs {
        toolVersion = "3.0.0"
        sourceSets = [sourceSets.main]
        ignoreFailures = true
        reportsDir = file("$project.buildDir/findbugsReports")
        effort = "max"
        reportLevel = "high"
        includeFilter = file("$projectDir/findbugs-security-include.xml")
        excludeFilter = file("$projectDir/findbugs-security-exclude.xml")
    }
}
sonarqube {
    properties {

        property "sonar.junit.reportsPath", "$buildDir/test-results"
        property "sonar.scoverage.reportPath", "$buildDir/reports/scoverage/scoverage.xml"
        property "sonar.scala.junit.reportsPath", "$buildDir/test-results"

    }
}

rootProject.tasks["sonarqube"].dependsOn reportScoverage
